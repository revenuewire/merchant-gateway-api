<?php
/**
 * NewMerchantGatewayVersion
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merchant Gateway API
 *
 * Merchant Gateway API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * NewMerchantGatewayVersion Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class NewMerchantGatewayVersion implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'newMerchantGatewayVersion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'gatewayPolicy' => '\Swagger\Client\Model\GatewayPolicy',
        'gatewayOverride' => '\Swagger\Client\Model\GatewayConfiguration[]',
        'currencyPolicy' => 'string',
        'currencyOverride' => 'string[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'gatewayPolicy' => 'gatewayPolicy',
        'gatewayOverride' => 'gatewayOverride',
        'currencyPolicy' => 'currencyPolicy',
        'currencyOverride' => 'currencyOverride'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'gatewayPolicy' => 'setGatewayPolicy',
        'gatewayOverride' => 'setGatewayOverride',
        'currencyPolicy' => 'setCurrencyPolicy',
        'currencyOverride' => 'setCurrencyOverride'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'gatewayPolicy' => 'getGatewayPolicy',
        'gatewayOverride' => 'getGatewayOverride',
        'currencyPolicy' => 'getCurrencyPolicy',
        'currencyOverride' => 'getCurrencyOverride'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CURRENCY_POLICY_DEFAULT = 'DEFAULT';
    const CURRENCY_POLICY_ALL_CURRENCIES = 'ALL_CURRENCIES';
    const CURRENCY_POLICY_CUSTOM = 'CUSTOM';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCurrencyPolicyAllowableValues()
    {
        return [
            self::CURRENCY_POLICY_DEFAULT,
            self::CURRENCY_POLICY_ALL_CURRENCIES,
            self::CURRENCY_POLICY_CUSTOM,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gatewayPolicy'] = isset($data['gatewayPolicy']) ? $data['gatewayPolicy'] : null;
        $this->container['gatewayOverride'] = isset($data['gatewayOverride']) ? $data['gatewayOverride'] : null;
        $this->container['currencyPolicy'] = isset($data['currencyPolicy']) ? $data['currencyPolicy'] : null;
        $this->container['currencyOverride'] = isset($data['currencyOverride']) ? $data['currencyOverride'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["DEFAULT", "ALL_CURRENCIES", "CUSTOM"];
        if (!in_array($this->container['currencyPolicy'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'currencyPolicy', must be one of 'DEFAULT', 'ALL_CURRENCIES', 'CUSTOM'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["DEFAULT", "ALL_CURRENCIES", "CUSTOM"];
        if (!in_array($this->container['currencyPolicy'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets gatewayPolicy
     * @return \Swagger\Client\Model\GatewayPolicy
     */
    public function getGatewayPolicy()
    {
        return $this->container['gatewayPolicy'];
    }

    /**
     * Sets gatewayPolicy
     * @param \Swagger\Client\Model\GatewayPolicy $gatewayPolicy
     * @return $this
     */
    public function setGatewayPolicy($gatewayPolicy)
    {
        $this->container['gatewayPolicy'] = $gatewayPolicy;

        return $this;
    }

    /**
     * Gets gatewayOverride
     * @return \Swagger\Client\Model\GatewayConfiguration[]
     */
    public function getGatewayOverride()
    {
        return $this->container['gatewayOverride'];
    }

    /**
     * Sets gatewayOverride
     * @param \Swagger\Client\Model\GatewayConfiguration[] $gatewayOverride
     * @return $this
     */
    public function setGatewayOverride($gatewayOverride)
    {
        $this->container['gatewayOverride'] = $gatewayOverride;

        return $this;
    }

    /**
     * Gets currencyPolicy
     * @return string
     */
    public function getCurrencyPolicy()
    {
        return $this->container['currencyPolicy'];
    }

    /**
     * Sets currencyPolicy
     * @param string $currencyPolicy
     * @return $this
     */
    public function setCurrencyPolicy($currencyPolicy)
    {
        $allowed_values = array('DEFAULT', 'ALL_CURRENCIES', 'CUSTOM');
        if (!is_null($currencyPolicy) && (!in_array($currencyPolicy, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'currencyPolicy', must be one of 'DEFAULT', 'ALL_CURRENCIES', 'CUSTOM'");
        }
        $this->container['currencyPolicy'] = $currencyPolicy;

        return $this;
    }

    /**
     * Gets currencyOverride
     * @return string[]
     */
    public function getCurrencyOverride()
    {
        return $this->container['currencyOverride'];
    }

    /**
     * Sets currencyOverride
     * @param string[] $currencyOverride
     * @return $this
     */
    public function setCurrencyOverride($currencyOverride)
    {
        $this->container['currencyOverride'] = $currencyOverride;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


